{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Briostack API",
    "description" : "### Introduction\nBriostack is a SaaS CRM application for pest control and lawn care service businesses. The Briostack API gives third-party software developers access to\nBriostack application data for the purpose of providing additional features or services for our subscribers.\n\n### About the API\nThe Briostack API is RESTful Web API. Applications use the API by sending HTTP requests to our servers. The Content-Type for all requests and responses is\n```application/json```. The API can be used with applications written in any programming language capable of making secure HTTP requests and processing\nJSON-formatted data, including Java, C##, Javascript, Python and many others.\n\n### Getting Started\n#### The API URL\nThe _base URL_ for each API endpoint is of the form\n\n  ```https://<instance-name>.briostack.io/rest/v1/```\n\nEvery Briostack subscriber has a unique instance name. The instance name is the subdomain of briostack.io that identifies the subscriber whose data you wish to\naccess. When you engage one of our subscribers, they will provide you with their Briostack instance name. You must use the *briostack.io* domain for API\nrequests, not briostack.com, which supports the Briostack user interface.\n\nThe resource-uri paths documented in this API Reference should be appended to the base URL to form the complete endpoint URL used in your HTTP request.\n\n#### API Keys\nAn API key must accompany every API request. You obtain an API key in one of two ways, depending on the type of key desired:\n\n- An _Integration Partner API Key_ allows API access to the data of any Briostack subscriber through a common API key.\nRegistered Integration Partner applications are listed in the Partner Directory in the Briostack UI and may be enabled by a subscriber with a single click.\n\n- A _User API Key_ allows access to the data of a specific Briostack subscriber. This type of key is associated with a specific user in the subscriber's\ninstance. An administrator or other Briostack application user with appropriate permission can create a User API key in their My Account settings.\n\nRegardless of the type of key, it must be provided with each API request as an HTTP header named ```x-api-key```.\n\n## More Information\nFor more information, please refer to the [Briostack API Developer's Guide](https://community.briostack.com/t/h7ym0b8/about-the-public-api)\n\n### For Support\n",
    "contact" : {
      "name" : "support@briostack.com",
      "email" : "support@briostack.com"
    },
    "version" : "1.0",
    "summary" : "API access to Briostack application data"
  },
  "servers" : [ {
    "url" : "https://pestproridall.briostack.io/rest/v1",
    "description" : "production"
  }, {
    "url" : "https://apisandbox.briostack.io/rest/v1",
    "description" : "sandbox"
  } ],
  "paths" : {
    "/branches" : {
      "get" : {
        "tags" : [ "branches" ],
        "summary" : "Get a list of branches",
        "description" : "## Usage\n- A maximum of 10000 branches will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getBranches",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BranchPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/branches/{branchId}/technicians" : {
      "get" : {
        "tags" : [ "employees", "branches" ],
        "summary" : "Get a list of employees",
        "description" : "## Usage\n- A maximum of 10000 employees will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getTechniciansForBranchesById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmployeePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/branches/{branchId}/technicians/{employeeId}" : {
      "get" : {
        "tags" : [ "employees", "branches" ],
        "summary" : "Get an employee",
        "operationId" : "getTechniciansByIdForBranchesById",
        "parameters" : [ {
          "name" : "employeeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Employee"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Get a list of customers",
        "description" : "## Usage\n- A maximum of 10000 customers will be returned in a single GET -- use `start` and `limit` for paging.\n ## Indexes:\n - customerId, firstName, lastName, branchId, accountTypeId, channelId",
        "operationId" : "getCustomers",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomerPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customers" ],
        "summary" : "Create a new customer",
        "operationId" : "addToCustomers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Get a customer",
        "operationId" : "getCustomersById",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customers" ],
        "summary" : "Update a customer",
        "description" : "Update a customer resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateCustomersById",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/appointments/{appointmentId}" : {
      "get" : {
        "tags" : [ "appointments", "customers" ],
        "summary" : "Get an appointment",
        "operationId" : "getAppointmentsByIdForCustomersById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "appointments", "customers" ],
        "summary" : "Update an appointment",
        "operationId" : "updateAppointmentsByIdForCustomersById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/appointments" : {
      "get" : {
        "tags" : [ "appointments", "customers" ],
        "summary" : "Get a list of appointments",
        "description" : "## Usage\n- A maximum of 10000 appointments will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getAppointmentsForCustomersById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "appointments", "customers" ],
        "summary" : "Create a new appointment",
        "operationId" : "addToAppointmentsForCustomersById",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/documents" : {
      "get" : {
        "tags" : [ "documents", "customers" ],
        "summary" : "Get a list of documents",
        "description" : "## Usage\n- A maximum of 10000 resources will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getDocumentsForCustomersById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DocumentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "documents", "customers" ],
        "summary" : "Upload a new document",
        "operationId" : "addToDocumentsForCustomersById",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentUploadForm"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentPartial"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/documents/{documentId}" : {
      "get" : {
        "tags" : [ "documents", "customers" ],
        "summary" : "Get a document",
        "operationId" : "getDocumentsByIdForCustomersById",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentPartial"
                }
              },
              "*/*" : { }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "documents", "customers" ],
        "summary" : "Update a document",
        "description" : "Update a document resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateDocumentsByIdForCustomersById",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Document"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/services" : {
      "get" : {
        "tags" : [ "services", "customers" ],
        "summary" : "Get a list of service resources",
        "description" : "## Usage\n- A maximum of 10000 services will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getServicesForCustomersById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServicePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "services", "customers" ],
        "summary" : "Create a new service resource",
        "operationId" : "addToServicesForCustomersById",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/services/{serviceId}" : {
      "get" : {
        "tags" : [ "services", "customers" ],
        "summary" : "Get details about a service",
        "operationId" : "getServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "services", "customers" ],
        "summary" : "Update a service",
        "description" : "Update a service resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/services/{serviceId}/appointments/{appointmentId}" : {
      "get" : {
        "tags" : [ "appointments", "services", "customers" ],
        "summary" : "Get an appointment",
        "operationId" : "getAppointmentsByIdForServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "appointments", "services", "customers" ],
        "summary" : "Update an appointment",
        "operationId" : "updateAppointmentsByIdForServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/customers/{customerId}/services/{serviceId}/appointments" : {
      "get" : {
        "tags" : [ "appointments", "services", "customers" ],
        "summary" : "Get a list of appointments",
        "description" : "## Usage\n- A maximum of 10000 appointments will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getAppointmentsForServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "appointments", "services", "customers" ],
        "summary" : "Create a new appointment",
        "operationId" : "addToAppointmentsForServicesByIdForCustomersById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/enumerations/account-types" : {
      "get" : {
        "tags" : [ "miscelleous" ],
        "summary" : "Get a list of Account Types",
        "operationId" : "getAccount-typesForEnumerations",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EnumeratedValue"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/enumerations/callback-windows" : {
      "get" : {
        "tags" : [ "miscelleous" ],
        "summary" : "Get a list of Callback Windows",
        "operationId" : "getCallback-windowsForEnumerations",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EnumeratedValue"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/enumerations/marketing-channels" : {
      "get" : {
        "tags" : [ "miscelleous" ],
        "summary" : "Get a list of Marketing Channels",
        "operationId" : "getMarketing-channelsForEnumerations",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EnumeratedValue"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/enumerations/primary-concerns" : {
      "get" : {
        "tags" : [ "miscelleous" ],
        "summary" : "Get a list of Primary Concerns",
        "operationId" : "getPrimary-concernsForEnumerations",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EnumeratedValue"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/leads" : {
      "get" : {
        "tags" : [ "leads" ],
        "summary" : "Get a list of leads",
        "description" : "## Usage\n - A maximum of 10000 leads will be returned in a single GET -- use `start` and `limit` for paging.\n ## Indexes:\n - leadId, branchId, officeId, channelId, leadType, leadRank, primarySalesRepId, dateAcquired, callBackDate, callBackTime, outOfContractDate, callBackWindow, active",
        "operationId" : "getLeads",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LeadPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "leads" ],
        "summary" : "Create a new lead",
        "operationId" : "addToLeads",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Lead"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lead"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/leads/{leadId}" : {
      "get" : {
        "tags" : [ "leads" ],
        "summary" : "Get a lead",
        "operationId" : "getLeadsById",
        "parameters" : [ {
          "name" : "leadId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Lead"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "leads" ],
        "summary" : "Update a lead",
        "description" : "Update a lead resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateLeadsById",
        "parameters" : [ {
          "name" : "leadId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Lead"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/marketing-campaigns" : {
      "get" : {
        "tags" : [ "marketing-campaigns" ],
        "summary" : "Get a list of marketing campaigns",
        "description" : "## Usage\n- A maximum of 10000 marketing campaigns will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getMarketing-campaigns",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MarketingCampaignPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/offices" : {
      "get" : {
        "tags" : [ "offices" ],
        "summary" : "Get a list of sales offices",
        "description" : "## Usage\n- A maximum of 10000 offices will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getOffices",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OfficePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/offices/{officeId}/sales-reps" : {
      "get" : {
        "tags" : [ "employees", "offices" ],
        "summary" : "Get a list of employees",
        "description" : "## Usage\n- A maximum of 10000 employees will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getSales-repsForOfficesById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "officeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmployeePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/offices/{officeId}/sales-reps/{employeeId}" : {
      "get" : {
        "tags" : [ "employees", "offices" ],
        "summary" : "Get an employee",
        "operationId" : "getSales-repsByIdForOfficesById",
        "parameters" : [ {
          "name" : "employeeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "officeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Employee"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/appointments/{appointmentId}" : {
      "get" : {
        "tags" : [ "appointments" ],
        "summary" : "Get an appointment",
        "operationId" : "getAppointmentsById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "appointments" ],
        "summary" : "Update an appointment",
        "operationId" : "updateAppointmentsById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/appointments" : {
      "get" : {
        "tags" : [ "appointments" ],
        "summary" : "Get a list of appointments",
        "description" : "## Usage\n- A maximum of 10000 appointments will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getAppointments",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "appointments" ],
        "summary" : "Create a new appointment",
        "operationId" : "addToAppointments",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/employees" : {
      "get" : {
        "tags" : [ "employees" ],
        "summary" : "Get a list of employees",
        "description" : "## Usage\n- A maximum of 10000 employees will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getEmployees",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmployeePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/employees/{employeeId}" : {
      "get" : {
        "tags" : [ "employees" ],
        "summary" : "Get an employee",
        "operationId" : "getEmployeesById",
        "parameters" : [ {
          "name" : "employeeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Employee"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/services" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get a list of service resources",
        "description" : "## Usage\n- A maximum of 10000 services will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getServices",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServicePartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Create a new service resource",
        "operationId" : "addToServices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/services/{serviceId}" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get details about a service",
        "operationId" : "getServicesById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Update a service",
        "description" : "Update a service resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateServicesById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Service"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/services/{serviceId}/appointments/{appointmentId}" : {
      "get" : {
        "tags" : [ "appointments", "services" ],
        "summary" : "Get an appointment",
        "operationId" : "getAppointmentsByIdForServicesById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "appointments", "services" ],
        "summary" : "Update an appointment",
        "operationId" : "updateAppointmentsByIdForServicesById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/services/{serviceId}/appointments" : {
      "get" : {
        "tags" : [ "appointments", "services" ],
        "summary" : "Get a list of appointments",
        "description" : "## Usage\n- A maximum of 10000 appointments will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getAppointmentsForServicesById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "appointments", "services" ],
        "summary" : "Create a new appointment",
        "operationId" : "addToAppointmentsForServicesById",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/service-categories" : {
      "get" : {
        "tags" : [ "service-categories" ],
        "summary" : "Get a list of service categories",
        "description" : "## Usage\n- A maximum of 10000 service categories will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getService-categories",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceCategoryPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/service-categories/{serviceCategoryId}" : {
      "get" : {
        "tags" : [ "service-categories" ],
        "summary" : "Get details about a service category",
        "operationId" : "getService-categoriesById",
        "parameters" : [ {
          "name" : "serviceCategoryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceCategory"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/service-categories/{serviceCategoryId}/appointments/{appointmentId}" : {
      "get" : {
        "tags" : [ "appointments", "service-categories" ],
        "summary" : "Get an appointment",
        "operationId" : "getAppointmentsByIdForService-categoriesById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceCategoryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "appointments", "service-categories" ],
        "summary" : "Update an appointment",
        "operationId" : "updateAppointmentsByIdForService-categoriesById",
        "parameters" : [ {
          "name" : "appointmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceCategoryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/service-categories/{serviceCategoryId}/appointments" : {
      "get" : {
        "tags" : [ "appointments", "service-categories" ],
        "summary" : "Get a list of appointments",
        "description" : "## Usage\n- A maximum of 10000 appointments will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getAppointmentsForService-categoriesById",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "serviceCategoryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "appointments", "service-categories" ],
        "summary" : "Create a new appointment",
        "operationId" : "addToAppointmentsForService-categoriesById",
        "parameters" : [ {
          "name" : "serviceCategoryId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Appointment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Get a list of webhook resources",
        "description" : "## Usage\n- A maximum of 10000 webhooks will be returned in a single GET -- use `start` and `limit` for paging.",
        "operationId" : "getWebhooks",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "return only resources matching this expression -- see [Filter Expression](https://community.briostack.com/t/h7ym0b8/about-the-public-api#filter-expression)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "collection index at which to start returning resources",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "the maximum number of resources to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100,
            "maximum" : 10000,
            "minimum" : 1
          }
        }, {
          "name" : "sort-by",
          "in" : "query",
          "description" : "property to sort by; prefix with '-' for descending sort; use multiple 'sort-by' parameters for multi-level sort",
          "style" : "simple",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "get-size",
          "in" : "query",
          "description" : "'true' to request the complete size of the [filtered] collection to be returned in the 'filtered-collection-size' response header",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "filtered-collection-size" : {
                "description" : "size of the filtered collection, if get-size was requested",
                "style" : "simple",
                "schema" : { }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WebhookPartial"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Create a new webhook resource",
        "operationId" : "addToWebhooks",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Webhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    },
    "/webhooks/{webhookId}" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Get a webhook resource",
        "operationId" : "getWebhooksById",
        "parameters" : [ {
          "name" : "webhookId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "webhooks" ],
        "summary" : "Update a webhook resource",
        "description" : "Update a webhook resource; supplied properties are overwritten -- absent properties are unchanged",
        "operationId" : "updateWebhooksById",
        "parameters" : [ {
          "name" : "webhookId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Webhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "JWT" : [ ]
        }, {
          "APIKEY" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "ApiErrorResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "Appointment" : {
        "type" : "object",
        "properties" : {
          "appointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Appointment date"
          },
          "recommendedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Recommended date according to the service schedule and appointment type"
          },
          "appointmentName" : {
            "type" : "string",
            "description" : "Appointment title",
            "maxLength" : 100,
            "minLength" : 1
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch that services this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "appointmentTypeId" : {
            "type" : "string",
            "description" : "The id of the type of this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/AppointmentStatus",
            "description" : "The id of the status of this appointment"
          },
          "confirmationStatusId" : {
            "$ref" : "#/components/schemas/AppointmentConfirmationStatus",
            "description" : "The id of the confirmation status of this appointment"
          },
          "jeopardy" : {
            "type" : "boolean",
            "description" : "Is the account in jeopardy?"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The id of the customer to which this appointment belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceId" : {
            "type" : "string",
            "description" : "The id of the customer service to which appointment's service belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The id of the service category to which appointment's service belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "primaryTechnicianId" : {
            "type" : "string",
            "description" : "The id of the technician assigned to service this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "price" : {
            "type" : "number",
            "format" : "double",
            "description" : "Appointment price",
            "minimum" : 0
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Appointment duration, in minutes"
          },
          "arrivalFrom" : {
            "type" : "string",
            "description" : "Start time of appointment arrival window"
          },
          "arrivalThru" : {
            "type" : "string",
            "description" : "End time of appointment arrival window"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment last modified date",
            "readOnly" : true
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment creation date",
            "readOnly" : true
          },
          "scheduledTime" : {
            "type" : "string",
            "description" : "Appointment scheduled time"
          },
          "commissionTypeName" : {
            "type" : "string",
            "description" : "Commission type",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "commissionTypeId" : {
            "type" : "string",
            "description" : "Commission type id",
            "maxLength" : 30,
            "minLength" : 0
          },
          "poNumber" : {
            "type" : "string",
            "description" : "PO Number",
            "maxLength" : 30,
            "minLength" : 1
          },
          "technicianCommissionableAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount from which the technician commission is calculated.",
            "minimum" : 0
          },
          "overrideTechnicianCommissionableAmount" : {
            "type" : "boolean",
            "description" : "Is tech commissionable amount override?"
          },
          "salesCommissionableAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount from which the sales commission is calculated.",
            "minimum" : 0
          },
          "overrideSaleCommissionableAmount" : {
            "type" : "boolean",
            "description" : "Is sales commissionable amount override?"
          },
          "invoiceId" : {
            "type" : "string",
            "description" : "The id of the invoice for this appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "invoicedAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Invoiced amount",
            "readOnly" : true
          },
          "customSequenceItemId" : {
            "type" : "string",
            "description" : "The id of the custom sequence Item for this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "reservicedAppointmentId" : {
            "type" : "string",
            "description" : "The id of the appointment is been re service with this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "locked" : {
            "type" : "boolean",
            "description" : "Is appointment locked?"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The user login which created this appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "The user login which updated this appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "originalAppointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The original date for this appointment",
            "readOnly" : true
          },
          "timeIn" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment time in",
            "readOnly" : true
          },
          "timeOut" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment time out",
            "readOnly" : true
          },
          "paymentId" : {
            "type" : "string",
            "description" : "The id of the payment for this appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "weather" : {
            "$ref" : "#/components/schemas/AppointmentWeather",
            "description" : "The weather data for this appointment",
            "readOnly" : true
          },
          "appointmentId" : {
            "type" : "string",
            "description" : "The unique identifier of the appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is appointment active?"
          }
        },
        "required" : [ "customerId" ]
      },
      "AppointmentArrivalType" : {
        "type" : "object",
        "enum" : [ "WINDOW", "FIXED" ]
      },
      "AppointmentConfirmationStatus" : {
        "type" : "object",
        "enum" : [ "SVC_TCK_CONF_MESSAGE", "SVC_TCK_CONF_NOTIFICATION", "SVC_TCK_CONF_CONFIRMED", "SVC_TCK_CONF_RESCHEDULED", "SVC_TCK_CONF_ATTEMPTED", "SVC_TCK_CONF_NEEDS_RECONF", "SVC_TCK_CONF_TECH_TO_CALL" ]
      },
      "AppointmentPartial" : {
        "type" : "object",
        "properties" : {
          "appointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Appointment date"
          },
          "recommendedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Recommended date according to the service schedule and appointment type"
          },
          "appointmentName" : {
            "type" : "string",
            "description" : "Appointment title",
            "maxLength" : 100,
            "minLength" : 1
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch that services this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "appointmentTypeId" : {
            "type" : "string",
            "description" : "The id of the type of this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/AppointmentStatus",
            "description" : "The id of the status of this appointment"
          },
          "confirmationStatusId" : {
            "$ref" : "#/components/schemas/AppointmentConfirmationStatus",
            "description" : "The id of the confirmation status of this appointment"
          },
          "jeopardy" : {
            "type" : "boolean",
            "description" : "Is the account in jeopardy?"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The id of the customer to which this appointment belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceId" : {
            "type" : "string",
            "description" : "The id of the customer service to which appointment's service belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The id of the service category to which appointment's service belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "primaryTechnicianId" : {
            "type" : "string",
            "description" : "The id of the technician assigned to service this appointment",
            "maxLength" : 30,
            "minLength" : 1
          },
          "price" : {
            "type" : "number",
            "format" : "double",
            "description" : "Appointment price",
            "minimum" : 0
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Appointment duration, in minutes"
          },
          "arrivalFrom" : {
            "type" : "string",
            "description" : "Start time of appointment arrival window"
          },
          "arrivalThru" : {
            "type" : "string",
            "description" : "End time of appointment arrival window"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment last modified date",
            "readOnly" : true
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment creation date",
            "readOnly" : true
          },
          "scheduledTime" : {
            "type" : "string",
            "description" : "Appointment scheduled time"
          },
          "commissionTypeName" : {
            "type" : "string",
            "description" : "Commission type",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "commissionTypeId" : {
            "type" : "string",
            "description" : "Commission type id",
            "maxLength" : 30,
            "minLength" : 0
          },
          "distance" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The distance, in miles, of this appointment from the prior appointment on the technician's route"
          },
          "branchName" : {
            "type" : "string",
            "description" : "The name of the branch to which this appointment belongs",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "serviceName" : {
            "type" : "string",
            "description" : "The name of the service to which the appointment belongs",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "serviceCategoryName" : {
            "type" : "string",
            "description" : "The name of the service category to which the appointment belongs",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "appointmentTypeName" : {
            "type" : "string",
            "description" : "Appointment type name",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "customerFirstName" : {
            "type" : "string",
            "description" : "The first name of the customer",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "customerLastName" : {
            "type" : "string",
            "description" : "The last name of the customer",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "isMDU" : {
            "type" : "boolean",
            "description" : "Is Multi dwelling unit?"
          },
          "lastServiceDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of the last regular service",
            "readOnly" : true
          },
          "primaryTechnicianFirstName" : {
            "type" : "string",
            "description" : "The first name of the technician",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "primaryTechnicianLastName" : {
            "type" : "string",
            "description" : "The last name of the technician",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The name of the status of this appointment",
            "maxLength" : 100,
            "minLength" : 1
          },
          "appointmentId" : {
            "type" : "string",
            "description" : "The unique identifier of the appointment",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is appointment active?"
          },
          "serviceAddress" : {
            "$ref" : "#/components/schemas/PostalAddress",
            "description" : "Service address"
          }
        },
        "required" : [ "customerId" ]
      },
      "AppointmentPriceType" : {
        "type" : "object",
        "enum" : [ "FIXED", "PROPERTY_SQ_FT", "STRUCTURE_SQ_FT", "LINEAR_FT" ]
      },
      "AppointmentPricingRateType" : {
        "type" : "object",
        "enum" : [ "FLAT_RATE", "PER_SQ_FT" ]
      },
      "AppointmentPricingTier" : {
        "type" : "object",
        "properties" : {
          "cost" : {
            "type" : "number",
            "format" : "double",
            "description" : "Cost in USD"
          },
          "rateType" : {
            "$ref" : "#/components/schemas/AppointmentPricingRateType",
            "description" : "Rate type"
          },
          "floor" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Lowest quantity that qualifies for this tier"
          }
        }
      },
      "AppointmentRegularSchedule" : {
        "type" : "object",
        "properties" : {
          "useAppointmentPool" : {
            "type" : "boolean",
            "description" : "Use appointment pool"
          },
          "requiresConfirmation" : {
            "type" : "boolean",
            "description" : "Requires confirmation"
          },
          "scheduleType" : {
            "$ref" : "#/components/schemas/AppointmentScheduleType",
            "description" : "Schedule Type"
          },
          "regularScheduleInterval" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Regular schedule interval",
            "minimum" : 1
          },
          "regularScheduleIntervalType" : {
            "$ref" : "#/components/schemas/AppointmentScheduleIntervalType",
            "description" : "Regular schedule interval type"
          },
          "monthlyScheduleMonths" : {
            "type" : "array",
            "description" : "Monthly schedule months 1-12",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            },
            "uniqueItems" : true
          },
          "customScheduleSequence" : {
            "type" : "array",
            "description" : "Custom schedule sequence",
            "items" : {
              "$ref" : "#/components/schemas/CustomAppointmentSequence"
            },
            "readOnly" : true
          },
          "weeklyScheduleDays" : {
            "type" : "array",
            "description" : "Days of the week in case of weekly regular schedule",
            "items" : {
              "$ref" : "#/components/schemas/DayOfTheWeek"
            }
          },
          "monthlyScheduleDays" : {
            "type" : "array",
            "description" : "Which day of the month in case monthly based regular schedule",
            "items" : {
              "$ref" : "#/components/schemas/MonthlyScheduleDay"
            }
          },
          "flexDays" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Flex days"
          },
          "daysFromInitial" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Days from initial"
          },
          "daysFirstRecurringFlex" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Days first recurring flex"
          },
          "blackoutPeriods" : {
            "type" : "array",
            "description" : "Black out periods",
            "items" : {
              "$ref" : "#/components/schemas/ServiceBlackoutPeriod"
            },
            "readOnly" : true
          }
        }
      },
      "AppointmentScheduleIntervalType" : {
        "type" : "object",
        "enum" : [ "DAYS", "WEEKS", "MONTHS" ]
      },
      "AppointmentScheduleType" : {
        "type" : "object",
        "enum" : [ "NEVER", "REGULAR", "MONTHLY", "CUSTOM" ]
      },
      "AppointmentSequenceTimeOffsetUnits" : {
        "type" : "object",
        "enum" : [ "DAYS", "WEEKS", "MONTHS", "BIMONTHLY" ]
      },
      "AppointmentStatus" : {
        "type" : "object",
        "enum" : [ "SVC_TICK_ACTIVE", "SVC_TICK_COMPLETED", "SVC_TICK_RESOLVED", "SVC_TICK_SKIPPED", "SVC_TICK_CANCELLED", "SVC_TICK_DEACTIVATED", "SVC_TICK_SUBMITTED", "UNKNOWN_STATUS" ],
        "externalDocs" : {
          "description" : "Status Descriptions",
          "url" : "./AppointmentStatus.html"
        }
      },
      "AppointmentType" : {
        "type" : "object",
        "properties" : {
          "appointmentTypeId" : {
            "type" : "string",
            "description" : "Appointment type id"
          },
          "name" : {
            "type" : "string",
            "description" : "Appointment type name"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Duration"
          },
          "requiresReview" : {
            "type" : "boolean",
            "description" : "Requires review"
          },
          "appointmentTypeType" : {
            "$ref" : "#/components/schemas/AppointmentTypeType",
            "description" : "Type of appointment type"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is the appointment type active?"
          },
          "pricing" : {
            "$ref" : "#/components/schemas/AppointmentTypePricing",
            "description" : "Pricing"
          },
          "technicianCommission" : {
            "$ref" : "#/components/schemas/AppointmentTypeCommission",
            "description" : "Technician Commission"
          },
          "salesCommission" : {
            "$ref" : "#/components/schemas/AppointmentTypeCommission",
            "description" : "Sales Commission"
          }
        }
      },
      "AppointmentTypeCommission" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "boolean",
            "description" : "Price"
          },
          "fixed" : {
            "type" : "number",
            "format" : "double",
            "description" : "Fixed"
          },
          "deduction" : {
            "type" : "number",
            "format" : "double",
            "description" : "Deduction"
          },
          "percentage" : {
            "type" : "number",
            "format" : "double",
            "description" : "Percentage"
          },
          "minimum" : {
            "type" : "number",
            "format" : "double",
            "description" : "Minimum"
          },
          "maximum" : {
            "type" : "number",
            "format" : "double",
            "description" : "Maximum"
          },
          "appointments" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of appointments that qualify for commission; absence implies 'all'"
          }
        }
      },
      "AppointmentTypePricing" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/AppointmentPriceType",
            "description" : "Type"
          },
          "fixedPrice" : {
            "type" : "number",
            "format" : "double",
            "description" : "Price if type is fixed"
          },
          "pricingTiers" : {
            "type" : "array",
            "description" : "Pricing Tiers",
            "items" : {
              "$ref" : "#/components/schemas/AppointmentPricingTier"
            }
          }
        }
      },
      "AppointmentTypeType" : {
        "type" : "object",
        "enum" : [ "SVC_CAT_TYPE_PRE", "SVC_CAT_TYPE_INIT", "SVC_CAT_TYPE_REGULAR", "SVC_CAT_TYPE_RESERVICE", "SVC_CAT_TYPE_OTHER" ],
        "externalDocs" : {
          "description" : "Types of appoointment types",
          "url" : "./AppointmentTypeType.html"
        }
      },
      "AppointmentWeather" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date of the weather lecture",
            "readOnly" : true
          },
          "windSpeed" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The speed of the wind",
            "readOnly" : true
          },
          "windDirection" : {
            "type" : "string",
            "description" : "The direction of the wind",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "skyCondition" : {
            "type" : "string",
            "description" : "The condition of the sky",
            "maxLength" : 60,
            "minLength" : 1,
            "readOnly" : true
          },
          "precipitation" : {
            "type" : "string",
            "description" : "The precipitation lecture",
            "maxLength" : 60,
            "minLength" : 1,
            "readOnly" : true
          }
        }
      },
      "BranchPartial" : {
        "type" : "object",
        "properties" : {
          "branchId" : {
            "type" : "string",
            "description" : "The unique identifier of the branch",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "branchName" : {
            "type" : "string",
            "description" : "Branch name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Defines if the Branch is active or not"
          },
          "branchAddress" : {
            "$ref" : "#/components/schemas/PostalAddressPartial",
            "description" : "Branch address"
          }
        }
      },
      "ContractTimeUnits" : {
        "type" : "object",
        "enum" : [ "DAYS", "WEEKS", "MONTHS", "YEARS" ]
      },
      "ContractType" : {
        "type" : "object",
        "enum" : [ "CONTRACT_NUM", "CONTRACT_TIME" ]
      },
      "CustomAppointmentSequence" : {
        "type" : "object",
        "properties" : {
          "appointmentName" : {
            "type" : "string",
            "description" : "Appointment sequence name"
          },
          "sequenceNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Appointment sequence number"
          },
          "targetTimeOffset" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Target time from prior appointment number"
          },
          "targetTimeOffsetUnits" : {
            "$ref" : "#/components/schemas/AppointmentSequenceTimeOffsetUnits",
            "description" : "Target time from prior appointment type"
          },
          "minimumTimeOffset" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Minimum time from prior appointment number"
          },
          "minimumTimeOffsetUnits" : {
            "$ref" : "#/components/schemas/AppointmentSequenceTimeOffsetUnits",
            "description" : "Minimum time from prior appointment type"
          },
          "earliestDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Earliest date; when (customSequenceType) is RANGE"
          },
          "latestDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Latest date; when (customSequenceType) is RANGE"
          },
          "appointmentDuration" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Appointment duration, in minutes"
          }
        }
      },
      "CustomSequenceType" : {
        "type" : "object",
        "enum" : [ "RANGE", "SEQUENCE", "NONE" ]
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Is customer active?"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the customer",
            "maxLength" : 30,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the customer or name of company",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/CustomerStatus",
            "description" : "The id of the status of this customer"
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch to which this customer belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "accountTypeId" : {
            "type" : "string",
            "description" : "The id of the account type which applies to this customer",
            "maxLength" : 30,
            "minLength" : 1
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this customer",
            "items" : {
              "type" : "string"
            }
          },
          "dateAcquired" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date of customer acquisition"
          },
          "primaryAddress" : {
            "$ref" : "#/components/schemas/PostalAddress",
            "description" : "Primary postal address"
          },
          "primaryEmail" : {
            "$ref" : "#/components/schemas/EmailAddress",
            "description" : "Primary email address"
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Primary phone number"
          },
          "channelId" : {
            "type" : "string",
            "description" : "The id of channel that applies to this customer belongs; see /enumerations/marketing-channels",
            "maxLength" : 30,
            "minLength" : 1
          },
          "leadTypeId" : {
            "$ref" : "#/components/schemas/LeadType",
            "description" : "The id of the lead type that applies to this customer"
          },
          "marketingCampaignId" : {
            "type" : "string",
            "description" : "The id of the marketing campaign to which this customer belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "salesTaxCode" : {
            "type" : "string",
            "description" : "Sales tax code",
            "maxLength" : 30,
            "minLength" : 1
          },
          "mapCode" : {
            "type" : "string",
            "description" : "Map code",
            "maxLength" : 30,
            "minLength" : 1
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/PostalAddress",
            "description" : "Billing postal address"
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Secondary phone number"
          },
          "billingContactName" : {
            "type" : "string",
            "description" : "Billing contact name"
          },
          "billingPrimaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Billing primary phone number"
          },
          "billingSecondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Billing secondary phone number"
          },
          "billingEmail" : {
            "$ref" : "#/components/schemas/EmailAddress",
            "description" : "Bill email address"
          },
          "sendMarketingEmail" : {
            "type" : "boolean",
            "description" : "Send marketing email notifications to the primary email"
          },
          "sendMarketingText" : {
            "type" : "boolean",
            "description" : "Send marketing phone notifications to the primary phone"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The unique identifier of the customer",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "leadId" : {
            "type" : "string",
            "description" : "The identifier of the lead to be converted to customer",
            "maxLength" : 30,
            "minLength" : 1
          },
          "externalId" : {
            "type" : "string",
            "description" : "External id",
            "maxLength" : 30,
            "minLength" : 1
          }
        },
        "required" : [ "branchId", "lastName" ]
      },
      "CustomerPartial" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Is customer active?"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the customer",
            "maxLength" : 30,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the customer or name of company",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/CustomerStatus",
            "description" : "The id of the status of this customer"
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch to which this customer belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "accountTypeId" : {
            "type" : "string",
            "description" : "The id of the account type which applies to this customer",
            "maxLength" : 30,
            "minLength" : 1
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this customer",
            "items" : {
              "type" : "string"
            }
          },
          "dateAcquired" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date of customer acquisition"
          },
          "primaryAddress" : {
            "$ref" : "#/components/schemas/PostalAddressPartial",
            "description" : "Primary postal address"
          },
          "primaryEmail" : {
            "$ref" : "#/components/schemas/EmailAddressPartial",
            "description" : "Primary email address"
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Primary phone number"
          },
          "balance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Customer balance",
            "readOnly" : true
          },
          "amountDue" : {
            "type" : "number",
            "format" : "double",
            "description" : "Customer amount due",
            "readOnly" : true
          },
          "lastInvoiceUnpaid" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Customer last invoice unpaid",
            "readOnly" : true
          },
          "daysPastDue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Customer days past due",
            "readOnly" : true
          },
          "branchName" : {
            "type" : "string",
            "description" : "The name of the branch to which this customer belongs",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The status description",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "accountType" : {
            "type" : "string",
            "description" : "The name of the account Type to which this customer belongs",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "customerId" : {
            "type" : "string",
            "description" : "The unique identifier of the customer",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "branchId", "lastName" ]
      },
      "CustomerStatus" : {
        "type" : "object",
        "enum" : [ "CUSTOMER_ACTIVE", "CUSTOMER_CANCEL_IN", "CUSTOMER_CANCEL_OUT", "CUSTOMER_COMPLETE", "CUSTOMER_HOLD", "CUSTOMER_NEEDS_REVIEW", "CUSTOMER_PENDING", "CUSTOMER_SCRATCH" ]
      },
      "DayOfTheWeek" : {
        "type" : "object",
        "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
      },
      "Document" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Is document active?"
          },
          "name" : {
            "type" : "string",
            "description" : "Document name",
            "pattern" : "^(?!^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..+)?$)[A-Za-z0-9._ -]{1,255}$"
          },
          "isVisibleToCustomer" : {
            "type" : "boolean",
            "description" : "Visible to the customer in the portal"
          },
          "isVisibleToTechnician" : {
            "type" : "boolean",
            "description" : "Visible to the technician"
          },
          "documentTypeId" : {
            "type" : "string",
            "description" : "Type of document, if generated document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "documentType" : {
            "type" : "string",
            "description" : "Description of type of document, if generated document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "size" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Size of document, in bytes",
            "readOnly" : true
          },
          "mediaType" : {
            "type" : "string",
            "description" : "MIME type of document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Unique login of document creator",
            "maxLength" : 255,
            "minLength" : 1,
            "readOnly" : true
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of document creation",
            "readOnly" : true
          },
          "customerId" : {
            "type" : "string",
            "description" : "Unique identifier of customer, owner of document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "serviceId" : {
            "type" : "string",
            "description" : "Unique identifier of related service, if applicable",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "appoinmentId" : {
            "type" : "string",
            "description" : "Unique identifier of related appointment, if applicable",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "documentId" : {
            "type" : "string",
            "description" : "The unique identifier of the document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "active", "appoinmentId", "createdBy", "createdDate", "customerId", "documentId", "documentType", "documentTypeId", "isVisibleToCustomer", "isVisibleToTechnician", "name", "serviceId", "size" ]
      },
      "DocumentPartial" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Is document active?"
          },
          "name" : {
            "type" : "string",
            "description" : "Document name",
            "pattern" : "^(?!^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..+)?$)[A-Za-z0-9._ -]{1,255}$"
          },
          "isVisibleToCustomer" : {
            "type" : "boolean",
            "description" : "Visible to the customer in the portal"
          },
          "isVisibleToTechnician" : {
            "type" : "boolean",
            "description" : "Visible to the technician"
          },
          "documentTypeId" : {
            "type" : "string",
            "description" : "Type of document, if generated document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "documentType" : {
            "type" : "string",
            "description" : "Description of type of document, if generated document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "size" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Size of document, in bytes",
            "readOnly" : true
          },
          "mediaType" : {
            "type" : "string",
            "description" : "MIME type of document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Unique login of document creator",
            "maxLength" : 255,
            "minLength" : 1,
            "readOnly" : true
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of document creation",
            "readOnly" : true
          },
          "customerId" : {
            "type" : "string",
            "description" : "Unique identifier of customer, owner of document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "serviceId" : {
            "type" : "string",
            "description" : "Unique identifier of related service, if applicable",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "appoinmentId" : {
            "type" : "string",
            "description" : "Unique identifier of related appointment, if applicable",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "documentId" : {
            "type" : "string",
            "description" : "The unique identifier of the document",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "active", "appoinmentId", "createdBy", "createdDate", "customerId", "documentId", "documentType", "documentTypeId", "isVisibleToCustomer", "isVisibleToTechnician", "name", "serviceId", "size" ]
      },
      "DocumentUploadForm" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "format" : "binary",
            "description" : "Document to add"
          },
          "name" : {
            "type" : "string",
            "description" : "Document name (if omitted, same as filename); if a document of the same name exists for this customer, it will be deactivated",
            "pattern" : "^(?!^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..+)?$)[A-Za-z0-9._ -]{1,255}$"
          },
          "isVisibleToCustomer" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Document can be viewed by the customer"
          },
          "isVisibleToTechnician" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Document can be viewed by a technician assigned to the customer's appointments"
          }
        },
        "required" : [ "file" ]
      },
      "EmailAddress" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Email address",
            "pattern" : "^[A-Za-z0-9+_.-]+@(.+)$"
          },
          "notifications" : {
            "type" : "boolean",
            "description" : "Send email notifications to the address"
          },
          "contactMethodId" : {
            "type" : "string",
            "description" : "The unique identifier of the email",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "address" ]
      },
      "EmailAddressPartial" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Email address",
            "pattern" : "^[A-Za-z0-9+_.-]+@(.+)$"
          }
        },
        "required" : [ "address" ]
      },
      "Employee" : {
        "type" : "object",
        "properties" : {
          "securityGroup" : {
            "type" : "string",
            "description" : "Assigned security group",
            "maxLength" : 30,
            "minLength" : 0
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is employee active"
          },
          "roles" : {
            "type" : "array",
            "description" : "Employee roles",
            "items" : {
              "$ref" : "#/components/schemas/EmployeeRole"
            }
          },
          "branchIdsAssigned" : {
            "type" : "array",
            "description" : "For technicians, the ids of the branches to which the employee is assigned",
            "items" : {
              "type" : "string"
            }
          },
          "officeIdsAssigned" : {
            "type" : "array",
            "description" : "For salesreps, the ids of the offices to which the employee is assigned",
            "items" : {
              "type" : "string"
            }
          },
          "employeeId" : {
            "type" : "string",
            "description" : "The unique identifier of the employee",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "firstName" : {
            "type" : "string",
            "description" : "Employee First Name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "middleName" : {
            "type" : "string",
            "description" : "Employee Middle Name",
            "maxLength" : 100,
            "minLength" : 0
          },
          "lastName" : {
            "type" : "string",
            "description" : "Employee Lastname",
            "maxLength" : 100,
            "minLength" : 0
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Employee primary phone number"
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Employee Secondary Phone Number"
          },
          "emailAddress" : {
            "$ref" : "#/components/schemas/EmailAddressPartial",
            "description" : "Employee Email Address"
          },
          "addressList" : {
            "type" : "array",
            "description" : "Employee Address list",
            "items" : {
              "$ref" : "#/components/schemas/PostalAddressPartial"
            }
          },
          "supervisorName" : {
            "type" : "string",
            "description" : "Employee's Supervisor Name",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "technicianLicenseNumber" : {
            "type" : "string",
            "description" : "Tech License number",
            "maxLength" : 30,
            "minLength" : 0
          },
          "firstYearSelling" : {
            "type" : "string",
            "description" : "First Year Selling",
            "maxLength" : 4,
            "minLength" : 0
          },
          "officePhoneExtension" : {
            "type" : "string",
            "description" : "Office Phone Extension",
            "maxLength" : 10,
            "minLength" : 0
          },
          "receiveTaskEmail" : {
            "type" : "boolean",
            "description" : "Receive Task Email"
          }
        }
      },
      "EmployeePartial" : {
        "type" : "object",
        "properties" : {
          "securityGroup" : {
            "type" : "string",
            "description" : "Assigned security group",
            "maxLength" : 30,
            "minLength" : 0
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is employee active"
          },
          "roles" : {
            "type" : "array",
            "description" : "Employee roles",
            "items" : {
              "$ref" : "#/components/schemas/EmployeeRole"
            }
          },
          "branchIdsAssigned" : {
            "type" : "array",
            "description" : "For technicians, the ids of the branches to which the employee is assigned",
            "items" : {
              "type" : "string"
            }
          },
          "officeIdsAssigned" : {
            "type" : "array",
            "description" : "For salesreps, the ids of the offices to which the employee is assigned",
            "items" : {
              "type" : "string"
            }
          },
          "userName" : {
            "type" : "string",
            "description" : "List of users assigned to this employee",
            "maxLength" : 255,
            "minLength" : 5
          },
          "loginEnabled" : {
            "type" : "boolean",
            "description" : "Is employee user login enabled"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "The unique identifier of the employee",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "firstName" : {
            "type" : "string",
            "description" : "Employee First Name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "middleName" : {
            "type" : "string",
            "description" : "Employee Middle Name",
            "maxLength" : 100,
            "minLength" : 0
          },
          "lastName" : {
            "type" : "string",
            "description" : "Employee Lastname",
            "maxLength" : 100,
            "minLength" : 0
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Employee primary phone number"
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Employee Secondary Phone Number"
          },
          "emailAddress" : {
            "$ref" : "#/components/schemas/EmailAddressPartial",
            "description" : "Employee Email Address"
          },
          "primaryAddress" : {
            "$ref" : "#/components/schemas/PostalAddressPartial",
            "description" : "Employee Primary Address"
          }
        }
      },
      "EmployeeRole" : {
        "type" : "object",
        "enum" : [ "EMPLOYEE", "SALES_REP", "SALES_MANAGER", "TECHNICIAN" ]
      },
      "EnumeratedValue" : {
        "type" : "object",
        "properties" : {
          "idValue" : {
            "type" : "string",
            "description" : "The id value"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          }
        }
      },
      "Lead" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the lead",
            "maxLength" : 30,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the lead",
            "maxLength" : 30,
            "minLength" : 1
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch to which this lead belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this lead",
            "items" : {
              "type" : "string"
            }
          },
          "officeId" : {
            "type" : "string",
            "description" : "The id of the sales office",
            "maxLength" : 30,
            "minLength" : 1
          },
          "leadType" : {
            "$ref" : "#/components/schemas/LeadType",
            "description" : "The type of this lead lead"
          },
          "leadRank" : {
            "$ref" : "#/components/schemas/LeadRank",
            "description" : "The rank of this lead"
          },
          "dateAcquired" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date lead was acquired",
            "readOnly" : true
          },
          "callBackDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Callback date"
          },
          "callBackTime" : {
            "type" : "string",
            "format" : "partial-time",
            "description" : "Callback time"
          },
          "outOfContractDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Out-of-contract date"
          },
          "primaryAddress" : {
            "$ref" : "#/components/schemas/PostalAddress",
            "description" : "Primary postal address"
          },
          "primaryEmail" : {
            "$ref" : "#/components/schemas/EmailAddress",
            "description" : "Primary email address"
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Primary phone number"
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Secondary phone number"
          },
          "leadId" : {
            "type" : "string",
            "description" : "The unique identifier of the lead",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "primarySalesRepId" : {
            "type" : "string",
            "description" : "The employeeId of the primary sales representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "secondarySalesRepId" : {
            "type" : "string",
            "description" : "The employeeId of the secondary sales representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "channelId" : {
            "type" : "string",
            "description" : "The unique identifier of the channel",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/LeadStatus",
            "description" : "The id of the lead's status"
          },
          "callBackWindow" : {
            "type" : "string",
            "description" : "The id of the callback window which applies to this lead; see /enumerations/callback-windows",
            "maxLength" : 30,
            "minLength" : 1
          },
          "marketingCampaignId" : {
            "type" : "string",
            "description" : "Marketing campaign id",
            "maxLength" : 30,
            "minLength" : 1
          },
          "externalId" : {
            "type" : "string",
            "description" : "External ID",
            "maxLength" : 255,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is lead active?"
          },
          "primaryConcernId" : {
            "type" : "string",
            "description" : "The id of the primary concern which applies to this lead; see /enumerations/primary-concerns",
            "maxLength" : 30,
            "minLength" : 1
          },
          "notes" : {
            "type" : "string",
            "description" : "Lead notes"
          },
          "currentProvider" : {
            "type" : "string",
            "description" : "Current Provider",
            "maxLength" : 100,
            "minLength" : 1
          }
        },
        "required" : [ "branchId" ]
      },
      "LeadPartial" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the lead",
            "maxLength" : 30,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the lead",
            "maxLength" : 30,
            "minLength" : 1
          },
          "branchId" : {
            "type" : "string",
            "description" : "The id of the branch to which this lead belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags applied to this lead",
            "items" : {
              "type" : "string"
            }
          },
          "officeId" : {
            "type" : "string",
            "description" : "The id of the sales office",
            "maxLength" : 30,
            "minLength" : 1
          },
          "leadType" : {
            "$ref" : "#/components/schemas/LeadType",
            "description" : "The type of this lead lead"
          },
          "leadRank" : {
            "$ref" : "#/components/schemas/LeadRank",
            "description" : "The rank of this lead"
          },
          "dateAcquired" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date lead was acquired",
            "readOnly" : true
          },
          "callBackDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Callback date"
          },
          "callBackTime" : {
            "type" : "string",
            "format" : "partial-time",
            "description" : "Callback time"
          },
          "outOfContractDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Out-of-contract date"
          },
          "primaryAddress" : {
            "$ref" : "#/components/schemas/PostalAddressPartial",
            "description" : "Primary postal address"
          },
          "primaryEmail" : {
            "$ref" : "#/components/schemas/EmailAddressPartial",
            "description" : "Primary email address"
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Primary phone number"
          },
          "branchName" : {
            "type" : "string",
            "description" : "The name of the branch to which this lead belongs",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "officeName" : {
            "type" : "string",
            "description" : "The name of the office to which this lead belongs",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "primarySalesRepName" : {
            "type" : "string",
            "description" : "The name of the primary sales representative",
            "readOnly" : true
          },
          "secondarySalesRepName" : {
            "type" : "string",
            "description" : "The name of the secondary sales representative",
            "readOnly" : true
          },
          "channelName" : {
            "type" : "string",
            "description" : "The name of the channel",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "leadId" : {
            "type" : "string",
            "description" : "The unique identifier of the lead",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "primarySalesRepId" : {
            "type" : "string",
            "description" : "The employeeId of the primary sales representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "secondarySalesRepId" : {
            "type" : "string",
            "description" : "The employeeId of the secondary sales representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "channelId" : {
            "type" : "string",
            "description" : "The unique identifier of the channel",
            "maxLength" : 30,
            "minLength" : 1
          },
          "statusId" : {
            "$ref" : "#/components/schemas/LeadStatus",
            "description" : "The id of the lead's status"
          },
          "callBackWindow" : {
            "type" : "string",
            "description" : "The id of the callback window which applies to this lead; see /enumerations/callback-windows",
            "maxLength" : 30,
            "minLength" : 1
          },
          "marketingCampaignId" : {
            "type" : "string",
            "description" : "Marketing campaign id",
            "maxLength" : 30,
            "minLength" : 1
          },
          "externalId" : {
            "type" : "string",
            "description" : "External ID",
            "maxLength" : 255,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is lead active?"
          }
        },
        "required" : [ "branchId" ]
      },
      "LeadRank" : {
        "type" : "object",
        "enum" : [ "LEAD_RANK_DONT_CALL", "LEAD_RANK_GOLDEN", "LEAD_RANK_INTERESTED", "LEAD_RANK_NOT_VERY", "LEAD_RANK_SOLD", "LEAD_RANK_SOMEWHAT", "LEAD_RANK_VERY_INTERESTED" ]
      },
      "LeadStatus" : {
        "type" : "object",
        "enum" : [ "SS_NOT_HOME", "SS_NOT_INTERESTED", "SS_GO_BACK", "SS_CALL_BACK", "SS_OTHER", "SS_RED_FLAG" ]
      },
      "LeadType" : {
        "type" : "object",
        "enum" : [ "LEAD_TYPE_BEEN_WANTING", "LEAD_TYPE_CHECK_HUSBAND", "LEAD_TYPE_CHECK_WIFE", "LEAD_TYPE_DIY", "LEAD_TYPE_MONEY_TIGHT", "LEAD_TYPE_NONE", "LEAD_TYPE_OTHER", "LEAD_TYPE_SEEING_BUGS", "LEAD_TYPE_SWITCH_IN_CONTRACT", "LEAD_TYPE_SWITCH_OUT_CONTRACT" ]
      },
      "MarketingCampaignPartial" : {
        "type" : "object",
        "properties" : {
          "marketingCampaignId" : {
            "type" : "string",
            "description" : "The unique identifier of the marketing campaign",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "campaignName" : {
            "type" : "string",
            "description" : "Campaign name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "campaignType" : {
            "$ref" : "#/components/schemas/MarketingCampaignType",
            "description" : "Campaign type"
          },
          "channelId" : {
            "type" : "string",
            "description" : "Marketing channel; see /enumerations/marketing-channels",
            "maxLength" : 30,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is campaign active?"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Campaign start date"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Campaign end date"
          },
          "notes" : {
            "type" : "string",
            "description" : "Notes"
          },
          "phoneNumber" : {
            "$ref" : "#/components/schemas/PhoneNumberPartial",
            "description" : "Campaign phone number"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Campaign creation user",
            "readOnly" : true
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Campaign creation date",
            "readOnly" : true
          }
        }
      },
      "MarketingCampaignType" : {
        "type" : "object",
        "enum" : [ "VOICE_FOR_PEST", "GENERIC" ]
      },
      "MonthlyScheduleDay" : {
        "type" : "object",
        "properties" : {
          "dayOfTheWeek" : {
            "$ref" : "#/components/schemas/DayOfTheWeek",
            "description" : "Which day of the week in case monthly based regular schedule"
          },
          "weekNumber" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Which week of the month for regular schedule",
            "maximum" : 4,
            "minimum" : 1
          }
        }
      },
      "NumberRange" : {
        "type" : "object",
        "properties" : {
          "minimum" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Minimum",
            "minimum" : 0
          },
          "maximum" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Maximum"
          }
        }
      },
      "OfficePartial" : {
        "type" : "object",
        "properties" : {
          "officeName" : {
            "type" : "string",
            "description" : "Office Name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is office active"
          },
          "officeId" : {
            "type" : "string",
            "description" : "The office unique identifier",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "officeName" ]
      },
      "PhoneNumber" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "Phone number; in E.164 format",
            "pattern" : "^\\+1\\d{10}$"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "pattern" : "^\\d{1,4}$"
          },
          "note" : {
            "type" : "string",
            "description" : "Description of phone number",
            "maxLength" : 255,
            "minLength" : 1
          },
          "textNotifications" : {
            "type" : "boolean",
            "description" : "Send SMS text notifications"
          },
          "callNotifications" : {
            "type" : "boolean",
            "description" : "Send voice call notifications"
          },
          "contactMethodId" : {
            "type" : "string",
            "description" : "The unique identifier of the phone",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "number" ]
      },
      "PhoneNumberPartial" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "Phone number; in E.164 format",
            "pattern" : "^\\+1\\d{10}$"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "pattern" : "^\\d{1,4}$"
          }
        },
        "required" : [ "number" ]
      },
      "PostalAddress" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Street address",
            "maxLength" : 255,
            "minLength" : 1
          },
          "city" : {
            "type" : "string",
            "description" : "City name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "State or province abbreviation",
            "pattern" : "^[A-Z]{2}$"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO 3166-1 Alpha-3 code for country",
            "pattern" : "^((USA)|(CAN))$"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "pattern" : "^((\\d{5}(-\\d{4})?)|(?:[A-Z]\\d){3})$"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "FIPS county code"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double",
            "description" : "Address longitude",
            "maximum" : 180,
            "minimum" : -180
          },
          "latitude" : {
            "type" : "number",
            "format" : "double",
            "description" : "Address latitude",
            "maximum" : 90,
            "minimum" : -90
          },
          "geoCodeLocationType" : {
            "type" : "string",
            "description" : "Geocode location type -- degree of accuracy",
            "maxLength" : 30,
            "minLength" : 1
          },
          "geoCodeSource" : {
            "type" : "string",
            "description" : "Geocode provider service name",
            "maxLength" : 100,
            "minLength" : 0
          },
          "notifications" : {
            "type" : "boolean",
            "description" : "Send postal mail notifications"
          },
          "propertySqFt" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Property area in square feet",
            "minimum" : 0
          },
          "structureSqFt" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Structure area in square feet",
            "minimum" : 0
          },
          "linearFt" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Linear feet",
            "minimum" : 0
          },
          "contactMethodId" : {
            "type" : "string",
            "description" : "The unique identifier of the address",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "address", "city", "countryCode", "postalCode", "stateOrProvince" ]
      },
      "PostalAddressPartial" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Street address",
            "maxLength" : 255,
            "minLength" : 1
          },
          "city" : {
            "type" : "string",
            "description" : "City name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "State or province abbreviation",
            "pattern" : "^[A-Z]{2}$"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO 3166-1 Alpha-3 code for country",
            "pattern" : "^((USA)|(CAN))$"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "pattern" : "^((\\d{5}(-\\d{4})?)|(?:[A-Z]\\d){3})$"
          }
        },
        "required" : [ "address", "city", "countryCode", "postalCode", "stateOrProvince" ]
      },
      "ScheduleFrequency" : {
        "type" : "object",
        "enum" : [ "DAILY", "MONTHLY", "WEEKLY" ]
      },
      "Service" : {
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The id of the customer for this service",
            "maxLength" : 30,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is service active?",
            "readOnly" : true
          },
          "serviceName" : {
            "type" : "string",
            "description" : "The name of the service",
            "maxLength" : 100,
            "minLength" : 1
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The unique identifier of the service category",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceCategoryName" : {
            "type" : "string",
            "description" : "The name of the service category",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "statusId" : {
            "$ref" : "#/components/schemas/ServiceStatus",
            "description" : "The status of the service",
            "readOnly" : true
          },
          "lastAppointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Last appointment date",
            "readOnly" : true
          },
          "nextAppointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Next appointment date",
            "readOnly" : true
          },
          "balance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Balance",
            "readOnly" : true
          },
          "initialAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Initial Amount",
            "readOnly" : true
          },
          "regularAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Regular Amount",
            "readOnly" : true
          },
          "invoiceScheduledAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Invoice Scheduled Amount",
            "readOnly" : true
          },
          "initialDiscount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Initial Discount",
            "minimum" : 0
          },
          "cancelFee" : {
            "type" : "number",
            "format" : "double",
            "description" : "Service Cancellation Fee",
            "minimum" : 0
          },
          "serviceContract" : {
            "$ref" : "#/components/schemas/ServiceContract",
            "description" : "Service contract details and duration"
          },
          "serviceSchedule" : {
            "$ref" : "#/components/schemas/ServiceSchedule",
            "description" : "Service Schedule"
          },
          "primarySalesRepId" : {
            "type" : "string",
            "description" : "Primary Sales Representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "primarySalesRepName" : {
            "type" : "string",
            "description" : "Primary Sales Representative",
            "readOnly" : true
          },
          "secondarySalesRepId" : {
            "type" : "string",
            "description" : "Secondary Sales Representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "secondarySalesRepName" : {
            "type" : "string",
            "description" : "Secondary Sales Representative",
            "readOnly" : true
          },
          "preferredTechnicianId" : {
            "type" : "string",
            "description" : "Preferred technician for future appointments",
            "maxLength" : 30,
            "minLength" : 1
          },
          "preferredTechnicianName" : {
            "type" : "string",
            "description" : "Preferred Technician",
            "readOnly" : true
          },
          "isSentricon" : {
            "type" : "boolean",
            "description" : "Is a Sentricon service?",
            "readOnly" : true
          },
          "isMDU" : {
            "type" : "boolean",
            "description" : "Is multi dwelling unit?"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the service was created",
            "readOnly" : true
          },
          "commissionTypeName" : {
            "type" : "string",
            "description" : "Commission type",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "commissionTypeId" : {
            "type" : "string",
            "description" : "Commission type id",
            "maxLength" : 30,
            "minLength" : 0
          },
          "channelId" : {
            "type" : "string",
            "description" : "The id of channel that applies to this customer belongs",
            "maxLength" : 30,
            "minLength" : 1
          },
          "salesTaxCode" : {
            "type" : "string",
            "description" : "Sales tax code",
            "maxLength" : 30,
            "minLength" : 1
          },
          "officeId" : {
            "type" : "string",
            "description" : "Sales Office Id",
            "maxLength" : 30,
            "minLength" : 1
          },
          "officeName" : {
            "type" : "string",
            "description" : "Sales Office Name",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "marketingCampaignId" : {
            "type" : "string",
            "description" : "Marketing Campaign Id",
            "maxLength" : 30,
            "minLength" : 1
          },
          "marketingCampaignName" : {
            "type" : "string",
            "description" : "Marketing Campaign Name",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "channelName" : {
            "type" : "string",
            "description" : "Marketing Campaign Name",
            "maxLength" : 255,
            "minLength" : 0,
            "readOnly" : true
          },
          "initialServiceInstructions" : {
            "type" : "string",
            "description" : "Initial Service Instructions",
            "maxLength" : 255,
            "minLength" : 1
          },
          "regularServiceInstructions" : {
            "type" : "string",
            "description" : "Regular Service Instructions",
            "maxLength" : 255,
            "minLength" : 1
          },
          "continueAfterContract" : {
            "type" : "boolean",
            "description" : "Continue service after contract expiration"
          },
          "collectSignatureOnNextAppointment" : {
            "type" : "boolean",
            "description" : "Is needed for the technician to collect signature on next appointment"
          },
          "contactName" : {
            "type" : "string",
            "description" : "Contact Name",
            "maxLength" : 255,
            "minLength" : 1
          },
          "contactEmail" : {
            "$ref" : "#/components/schemas/EmailAddress",
            "description" : "Service Contact Email"
          },
          "servicePhone" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "Service Phone"
          },
          "serviceAddress" : {
            "$ref" : "#/components/schemas/PostalAddress",
            "description" : "Service Address"
          },
          "appointmentPricing" : {
            "type" : "array",
            "description" : "Appointment pricing",
            "items" : {
              "$ref" : "#/components/schemas/ServiceAppointmentPricing"
            }
          },
          "additionalAgreementTerms" : {
            "type" : "string",
            "description" : "Additional agreement terms"
          },
          "purchaseOrderNumber" : {
            "type" : "string",
            "description" : "Purchase Order Number",
            "maxLength" : 255,
            "minLength" : 0
          },
          "serviceId" : {
            "type" : "string",
            "description" : "The unique identifier of the service",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "serviceCategoryId" ]
      },
      "ServiceAppointmentPricing" : {
        "type" : "object",
        "properties" : {
          "appointmentTypeId" : {
            "type" : "string",
            "description" : "Appointment type id"
          },
          "price" : {
            "type" : "number",
            "format" : "double",
            "description" : "Price",
            "minimum" : 0
          },
          "overrideTechnicianCommissionableAmount" : {
            "type" : "boolean",
            "description" : "Is tech commissionable amount override?"
          },
          "technicianCommissionableAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Amount from which the technician commission is calculated, in dollars; undefined == service category default",
            "minimum" : 0
          },
          "overrideSaleCommissionableAmount" : {
            "type" : "boolean",
            "description" : "Is sales commissionable amount override?"
          },
          "salesCommissionableAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Amount from which the sales commission is calculated, in dollars; undefined == service category default",
            "minimum" : 0
          },
          "duration" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Duration in minutes"
          }
        },
        "required" : [ "appointmentTypeId", "price" ]
      },
      "ServiceBlackoutPeriod" : {
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start"
          },
          "end" : {
            "type" : "string",
            "format" : "date",
            "description" : "End"
          }
        }
      },
      "ServiceCategory" : {
        "type" : "object",
        "properties" : {
          "serviceCategoryName" : {
            "type" : "string",
            "description" : "The name of the service category",
            "maxLength" : 100,
            "minLength" : 1
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Service category creation date"
          },
          "defaultContractLength" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Default contract length (Number of treatments)"
          },
          "defaultContractTime" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Default service category contract time"
          },
          "defaultContractTimeUnits" : {
            "$ref" : "#/components/schemas/ContractTimeUnits",
            "description" : "Contract Time Units"
          },
          "contractStartType" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Contract Time Units"
          },
          "invoiceSchedule" : {
            "$ref" : "#/components/schemas/ServiceCategoryInvoiceSchedule",
            "description" : "Invoice Schedule"
          },
          "continueAfterAgreement" : {
            "type" : "boolean",
            "description" : "Continue service after contract expiration"
          },
          "commissionableAppointments" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of commissionable appointments"
          },
          "appointmentTypes" : {
            "type" : "array",
            "description" : "Appointment Types",
            "items" : {
              "$ref" : "#/components/schemas/AppointmentType"
            }
          },
          "warranty" : {
            "$ref" : "#/components/schemas/ServiceWarranty",
            "description" : "Warranty"
          },
          "autoApplyPayments" : {
            "type" : "boolean",
            "description" : "Automatically apply appointment and invoice schedule payments to invoices"
          },
          "autoCreateFutureAppointments" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Allow scheduler to create (n) future appointments"
          },
          "initialDiscount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Default initial discount"
          },
          "allowEditInitialDiscount" : {
            "type" : "boolean",
            "description" : "Allow initial editing of initial discount"
          },
          "initialDiscountRange" : {
            "$ref" : "#/components/schemas/NumberRange",
            "description" : "Initial discount range"
          },
          "cancelFee" : {
            "type" : "number",
            "format" : "double",
            "description" : "Cancel fee"
          },
          "allowEditCancelFee" : {
            "type" : "boolean",
            "description" : "Allow editing of service cancel fee"
          },
          "cancelFeeRange" : {
            "$ref" : "#/components/schemas/NumberRange",
            "description" : "Cancel fee range"
          },
          "allowEditInitialAppointmentPrice" : {
            "type" : "boolean",
            "description" : "Allow edit initial appointment price"
          },
          "enableTechnicianAppointmentCopy" : {
            "type" : "boolean",
            "description" : "Enable technician appointment copy"
          },
          "requireTechnicianInstructionVerification" : {
            "type" : "boolean",
            "description" : "Require technician instruction verification"
          },
          "requireTechnicianSignature" : {
            "type" : "boolean",
            "description" : "Require technician signature"
          },
          "enableTechnicianStationService" : {
            "type" : "boolean",
            "description" : "Enable service stations"
          },
          "enableWeatherForAppointments" : {
            "type" : "boolean",
            "description" : "Enable weather for appointments"
          },
          "requireWeatherForAppointments" : {
            "type" : "boolean",
            "description" : "Require weather for appointments"
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The unique identifier of the service category",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "contractType" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Service category contract type"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is service category active?"
          },
          "isSentriconService" : {
            "type" : "boolean",
            "description" : "Is this a Sentricon service?"
          }
        },
        "required" : [ "serviceCategoryName" ]
      },
      "ServiceCategoryInvoiceSchedule" : {
        "type" : "object",
        "properties" : {
          "invoiceAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Invoice amount"
          },
          "invoiceFrequency" : {
            "$ref" : "#/components/schemas/ScheduleFrequency",
            "description" : "Invoice frequency"
          },
          "invoiceInterval" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Invoice amount"
          },
          "maxContractValueInvoices" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contract value should be calculated on no more than (n) schedule invoices"
          }
        }
      },
      "ServiceCategoryPartial" : {
        "type" : "object",
        "properties" : {
          "serviceCategoryName" : {
            "type" : "string",
            "description" : "The name of the service category",
            "maxLength" : 100,
            "minLength" : 1
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Service category creation date"
          },
          "activeServices" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of active services of this category"
          },
          "pendingServices" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of pending services of this category"
          },
          "scratchedServices" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of scratched services of this category"
          },
          "cancelledServices" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of cancelled services of this category"
          },
          "heldServices" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of held services of this category"
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The unique identifier of the service category",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          },
          "contractType" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Service category contract type"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is service category active?"
          },
          "isSentriconService" : {
            "type" : "boolean",
            "description" : "Is this a Sentricon service?"
          },
          "contractTypeName" : {
            "type" : "string",
            "description" : "Contract Type Name",
            "maxLength" : 30,
            "minLength" : 1
          }
        },
        "required" : [ "serviceCategoryName" ]
      },
      "ServiceContract" : {
        "type" : "object",
        "properties" : {
          "contractType" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Contract Type"
          },
          "contractTime" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contract length, in contractTimeUnits"
          },
          "contractTimeUnits" : {
            "$ref" : "#/components/schemas/ContractTimeUnits",
            "description" : "Contract Time Units"
          },
          "contractExpires" : {
            "type" : "string",
            "format" : "date",
            "description" : "Contract Expiration"
          },
          "contractLength" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contract Length (Number of Treatments)"
          },
          "contractRemaining" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contract remaining (Number of Treatments)"
          }
        }
      },
      "ServicePartial" : {
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The id of the customer for this service",
            "maxLength" : 30,
            "minLength" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is service active?",
            "readOnly" : true
          },
          "serviceName" : {
            "type" : "string",
            "description" : "The name of the service",
            "maxLength" : 100,
            "minLength" : 1
          },
          "serviceCategoryId" : {
            "type" : "string",
            "description" : "The unique identifier of the service category",
            "maxLength" : 30,
            "minLength" : 1
          },
          "serviceCategoryName" : {
            "type" : "string",
            "description" : "The name of the service category",
            "maxLength" : 100,
            "minLength" : 1,
            "readOnly" : true
          },
          "statusId" : {
            "$ref" : "#/components/schemas/ServiceStatus",
            "description" : "The status of the service",
            "readOnly" : true
          },
          "lastAppointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Last appointment date",
            "readOnly" : true
          },
          "nextAppointmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Next appointment date",
            "readOnly" : true
          },
          "balance" : {
            "type" : "number",
            "format" : "double",
            "description" : "Balance",
            "readOnly" : true
          },
          "initialAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Initial Amount",
            "readOnly" : true
          },
          "regularAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Regular Amount",
            "readOnly" : true
          },
          "invoiceScheduledAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Invoice Scheduled Amount",
            "readOnly" : true
          },
          "initialDiscount" : {
            "type" : "number",
            "format" : "double",
            "description" : "Initial Discount",
            "minimum" : 0
          },
          "cancelFee" : {
            "type" : "number",
            "format" : "double",
            "description" : "Service Cancellation Fee",
            "minimum" : 0
          },
          "serviceContract" : {
            "$ref" : "#/components/schemas/ServiceContract",
            "description" : "Service contract details and duration"
          },
          "serviceSchedule" : {
            "$ref" : "#/components/schemas/ServiceSchedule",
            "description" : "Service Schedule"
          },
          "primarySalesRepId" : {
            "type" : "string",
            "description" : "Primary Sales Representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "primarySalesRepName" : {
            "type" : "string",
            "description" : "Primary Sales Representative",
            "readOnly" : true
          },
          "secondarySalesRepId" : {
            "type" : "string",
            "description" : "Secondary Sales Representative",
            "maxLength" : 30,
            "minLength" : 1
          },
          "secondarySalesRepName" : {
            "type" : "string",
            "description" : "Secondary Sales Representative",
            "readOnly" : true
          },
          "preferredTechnicianId" : {
            "type" : "string",
            "description" : "Preferred technician for future appointments",
            "maxLength" : 30,
            "minLength" : 1
          },
          "preferredTechnicianName" : {
            "type" : "string",
            "description" : "Preferred Technician",
            "readOnly" : true
          },
          "isSentricon" : {
            "type" : "boolean",
            "description" : "Is a Sentricon service?",
            "readOnly" : true
          },
          "isMDU" : {
            "type" : "boolean",
            "description" : "Is multi dwelling unit?"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the service was created",
            "readOnly" : true
          },
          "commissionTypeName" : {
            "type" : "string",
            "description" : "Commission type",
            "maxLength" : 100,
            "minLength" : 0,
            "readOnly" : true
          },
          "commissionTypeId" : {
            "type" : "string",
            "description" : "Commission type id",
            "maxLength" : 30,
            "minLength" : 0
          },
          "serviceId" : {
            "type" : "string",
            "description" : "The unique identifier of the service",
            "maxLength" : 30,
            "minLength" : 1,
            "readOnly" : true
          }
        },
        "required" : [ "serviceCategoryId" ]
      },
      "ServiceRecurrenceType" : {
        "type" : "object",
        "enum" : [ "ONETIME", "RECURRING" ]
      },
      "ServiceSchedule" : {
        "type" : "object",
        "properties" : {
          "customSequenceType" : {
            "$ref" : "#/components/schemas/CustomSequenceType",
            "description" : "SEQUENCE or RANGE if custom sequence was configured"
          },
          "quartzExpr" : {
            "type" : "string",
            "description" : "Cron job definition for schedule",
            "maxLength" : 255,
            "minLength" : 0,
            "readOnly" : true
          },
          "frequency" : {
            "$ref" : "#/components/schemas/ScheduleFrequency",
            "description" : "Schedule frequency (used together with intervalNumber)",
            "readOnly" : true
          },
          "intervalNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Frequency interval (used together with frequency)",
            "readOnly" : true
          },
          "recurrence" : {
            "$ref" : "#/components/schemas/ServiceRecurrenceType",
            "description" : "Recurrence type"
          },
          "schedule" : {
            "$ref" : "#/components/schemas/AppointmentRegularSchedule",
            "description" : "Schedule"
          },
          "onHold" : {
            "type" : "boolean",
            "description" : "On Hold"
          },
          "lockAppointment" : {
            "type" : "boolean",
            "description" : "Lock appointment"
          },
          "arrivalType" : {
            "$ref" : "#/components/schemas/AppointmentArrivalType",
            "description" : "Arrival Type"
          },
          "arriveAfter" : {
            "type" : "string",
            "format" : "partial-time",
            "description" : "Arrive after"
          },
          "arriveBefore" : {
            "type" : "string",
            "format" : "partial-time",
            "description" : "Arrive before"
          },
          "arriveAt" : {
            "type" : "string",
            "format" : "partial-time",
            "description" : "Arrive at"
          }
        }
      },
      "ServiceStatus" : {
        "type" : "object",
        "enum" : [ "CSC_ACTIVE", "CSC_PENDING", "CSC_NEEDS_REVIEW", "CSC_HOLD", "CSC_COMPLETE", "CSC_CANCEL_IN", "CSC_CANCEL_OUT", "CSC_SCRATCH", "CSC_TRANSFERRED", "CSC_UNKNOWN", "CSC_PROPOSED", "CSC_DECLINED" ]
      },
      "ServiceWarranty" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Service warranty type"
          },
          "initialDuration" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Initial warranty duration"
          },
          "renewalDuration" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Renewal duration"
          },
          "startTrigger" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Warranty start"
          },
          "startAppointmentTypeId" : {
            "type" : "string",
            "description" : "Start automatically after completion of appointment type"
          },
          "renewTrigger" : {
            "$ref" : "#/components/schemas/ContractType",
            "description" : "Renew trigger"
          },
          "renewAppointmentTypeId" : {
            "type" : "string",
            "description" : "Renew automatically after completion of selected appointment type"
          }
        }
      },
      "Webhook" : {
        "type" : "object",
        "properties" : {
          "webhookId" : {
            "type" : "string",
            "description" : "Unique webhook id",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Webhook name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "url" : {
            "type" : "string",
            "description" : "URL to receive POST for triggered events"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is the webhook active?"
          },
          "events" : {
            "type" : "array",
            "description" : "Events that trigger the webhook",
            "items" : {
              "$ref" : "#/components/schemas/WebhookEventType"
            },
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true
          },
          "header" : {
            "$ref" : "#/components/schemas/WebhookHeader",
            "description" : "HTTP header to send with webhook request"
          },
          "retries" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of retries on POST failure",
            "maximum" : 5
          },
          "retryInterval" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Interval between retry attempts, in seconds",
            "maximum" : 86400,
            "minimum" : 15
          }
        }
      },
      "WebhookEventType" : {
        "type" : "object",
        "description" : "Events that trigger webhooks",
        "enum" : [ "WHEVENT_CUSTOMER_CREATE", "WHEVENT_CUSTOMER_CHANGE", "WHEVENT_LEAD_CREATE", "WHEVENT_LEAD_CHANGE", "WHEVENT_SERVICE_CREATE", "WHEVENT_SERVICE_CHANGE", "WHEVENT_APPOINTMENT_CREATE", "WHEVENT_APPOINTMENT_CHANGE", "WHEVENT_DOCUMENT_CREATE", "WHEVENT_DOCUMENT_SIGNING" ]
      },
      "WebhookHeader" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "HTTP header name",
            "pattern" : "[!#$%&'*+.^_|~0-9A-Za-z-]{1,64}"
          },
          "value" : {
            "type" : "string",
            "description" : "HTTP header value",
            "pattern" : "[\\x20-\\x7E\\t]{1,1024}"
          }
        }
      },
      "WebhookPartial" : {
        "type" : "object",
        "properties" : {
          "webhookId" : {
            "type" : "string",
            "description" : "Unique webhook id",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Webhook name",
            "maxLength" : 100,
            "minLength" : 1
          },
          "url" : {
            "type" : "string",
            "description" : "URL to receive POST for triggered events"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is the webhook active?"
          },
          "events" : {
            "type" : "array",
            "description" : "Events that trigger the webhook",
            "items" : {
              "$ref" : "#/components/schemas/WebhookEventType"
            },
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true
          }
        }
      }
    },
    "securitySchemes" : {
      "APIKEY" : {
        "type" : "apiKey",
        "name" : "x-api-key",
        "in" : "header"
      },
      "JWT" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}